Kata2a

some changes

Bygger vidare på Kata2 och övar arv, polymorfism och till sist immutability.
Vi ska också öva lite mer avancerad Git; git commit, git squash, git revert, git reset, git branch, git checkout, git push, git fetch, git pull, git merge, git cherrypick, git ammend

1. Kopiera koden från Kata2, kompilera och kör så att du har en stadig startpunkt.
2. Skapa en ny Git repository lokalt och på Github
3. Ändra namespace i alla filer till "Kata2a_Inheritance"
4. Gör en git commit och push som du namnger "namespace changed". Nu har du en körbar startpunkt

5. Skapa en git branch som du kallar "InheritanceRefracture". Gör git checkout till din nya branch

6. Lägg till propertin property string[] Benefits i IMember
	Gör en git commit utan push

7. I filen IMember.cs lägg till ett nytt interface IRadissonMember som måste implementera IMember. Låt det vara tomt så länge
	Gör en git commit utan push

8. I filen IMember.cs lägg till ett nytt interface IHiltonMember som måste implementera IMember. Låt det vara tomt så länge
	Gör en git commit utan push - namnge din commit till Interfaces finalized

9. Välj alla lokala git commits och gör en git squash. Du har nu fått en commit av allt interface byggande
	Gör en push och jämför din lokala repo med din github repo

10. Gör git checkout till master branch och se urspungskoden helt oförändrad. Kör ursprungskoden.
	Gör git checkout till InheritanceRefracture för att at dig tillbaka till rätt kodbranch

11. dubbelklcika på projektfilen och ta bort nullable reference types genom att ändra till <Nullable>disable</Nullable>.
	Gör en lokal git commit

12. I class Member 
	Gör klassen abstrakt så att den inte kan instansieras själv
	Implementera Benefits med en default NotImplementedException. Gör propertien till virtual. 
	Lägg till {GetType().Name} i ToString() så att även typen skrivs ut
	Ändra i ToString() så att också Benefits skrivs ut
	Gör en lokal commit och kalla den "Member implemented"

13. I egen fil skapa en class RadissonMember som implementerar IRadissonMember.
	Gör override property Benefits med get; set; 
	virtual (i Member) och override i (RadissonMember) gör Benefits polymorfisk
	Gör en lokal commit

14.	Skapa en metod RandomInit() i RadissonMember. Använd keywork new för metoden. Den är då inte polymorfisk.
	+ I RandomInit() anropa base.RandomInit() för att initiera Member
	+ lägg till kod i RandomInit() för att initiera Radisson member benefits unikt för Radisson. 
	+ Om du vill kan du nu lägga in olika benefit beroende på vilken Level som Member är initierad till
	Gör en lokal commit
	
15.	Flytta class factory från Member till RadissonMember
	Skapa en class Factory i RadissonMember som initierar instansen
	Ändra i Main() så att det skapas en RadissonMedlem
	Kompilera och kör programmet
	Gör en lokal commit som du kallar "RadissonMember class implemented"

16. Repetera punkterna 13 - 15 och skapa en HiltonMember class
	Gör en lokal commit som du kallar "HiltonMember clas implemented"

17. Repetera punkterna 13 - 15 och skapa en ScandicMember class
	Gör en lokal commit som du kallar "ScandicMember clas implemented"

18.	Ångra ScandicMember commit genom att välja commit "HiltonMember class implemented" och gör git reset -mixed. 
	Du har nu spolat tillbaka koden med alla ändringar som gjordes sedan "HiltonMember class implemented" finns i Git Changes. Du kan välja vad du vill radera.

19. Ändra i MemberList.CreateWithRandomData() så att varannan Member i listan är Radisson och varannan Hilton.

20. Squash all local commits, name the Squashed commit "All hotel classes implemented"
	Gör git push till remote repo.

21. Ändra i Main() så att det skapas en memberlista på 20 medlemmar
	Kompilera och kör
	Gör local commit
	Ändra namned på din local commit med git ammend
	Gör git push till remote repo

22. Gör git checkout till master branch och se urspungskoden helt oförändrad. Kör ursprungskoden.
	Gör git checkout till InheritanceRefracture för att se din modifierade kod. Kör den modifierade koden.

23.	Gör en git revert på ditt sista commit. Du ser att koden du gjorde i Main() försvann.
	Göre en git revert på din senaste revert så får du tillbaka koden

24. Nu när du är nöjd med din kod i branch InheritanceRefracture är det dags att göra en git merge för att slå ihop den med master branchen
	Gör en checkout till master branchen
	Gör git merge InheritanceRefracture into master
	Resolve any conflicts
	Undersök och förstå innehållet i staged changes.
	Commit staged changes.
	Voila!! - du har nu integrerat InheritanceRefracture i din master brach

25. Om du vill: Hitta något tidigare commit och hämta någon kod med git cherrypick 
